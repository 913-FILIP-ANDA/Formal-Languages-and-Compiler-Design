%option noyywrap

%{ 	 
#include <stdio.h>
#include <string.h>
#include "lang.tab.h"
int lines = 0;
%}  

DIGIT 		[0-9]
WORD		\"[a-zA-Z0-9]*\"
INTEGER		[+-]?[1-9][0-9]*|0
CHARACTER 	\'[a-zA-Z0-9]\'
constant	{WORD}|{INTEGER}|{CHARACTER}
identifier	[a-zA-Z][a-zA-Z0-9]* 

%% 

read           {printf( "Reserved word: %s\n", yytext); return READ;}
display          {printf( "Reserved word: %s\n", yytext); return DISPLAY;}
define       {printf( "Reserved word: %s\n", yytext); return DEFINE;}
int       {printf( "Reserved word: %s\n", yytext); return INT;}
start        {printf( "Reserved word: %s\n", yytext); return START;}
string       {printf( "Reserved word: %s\n", yytext); return STRING;}
character    {printf( "Reserved word: %s\n", yytext); return CHARACTER;}
if    		 {printf( "Reserved word: %s\n", yytext); return IF;}
end       	 {printf( "Reserved word: %s\n", yytext); return END;}
then       {printf( "Reserved word: %s\n", yytext); return THEN;}
do      {printf( "Reserved word: %s\n", yytext); return DO;}
while      	 {printf( "Reserved word: %s\n", yytext); return WHILE;}
for      	 {printf( "Reserved word: %s\n", yytext); return FOR;}
stop    {printf( "Reserved word: %s\n", yytext); return STOP;}
else         {printf( "Reserved word: %s\n", yytext); return ELSE;}

","	    	 {printf( "Separator: %s\n", yytext ); return COMMA;}
";"	    	 {printf( "Separator: %s\n", yytext ); return SEMI_COLON;}
":"	    	 {printf( "Separator: %s\n", yytext ); return COLON;}
"{"	    	 {printf( "Separator: %s\n", yytext ); return OPEN_CURLY_BRACKET;}
"}"	    	 {printf( "Separator: %s\n", yytext ); return CLOSED_CURLY_BRACKET;}
"("              {printf( "Separator: %s\n", yytext ); return OPEN_ROUND_BRACKET;}
")"              {printf( "Separator: %s\n", yytext ); return CLOSED_ROUND_BRACKET;}
"["	    	 {printf( "Separator: %s\n", yytext ); return OPEN_RIGHT_BRACKET;}
"]"	    	 {printf( "Separator: %s\n", yytext ); return CLOSED_RIGHT_BRACKET;}
env
":="		 {printf( "Assignment Operator: %s\n", yytext ); return ASSIGNMENT;}
"+"	    	 {printf( "Operator: %s\n", yytext ); return ADD;}
"++"             {printf( "Operator: %s\n", yytext ); return INCR;}
"-"	    	 {printf( "Operator: %s\n", yytext ); return SUB;}
"*"	    	 {printf( "Operator: %s\n", yytext ); return MUL;}
"/"	    	 {printf( "Operator: %s\n", yytext ); return DIV;}
"mod"		 {printf( "Operator: %s\n", yytext ); return MOD;}
"=="	    	 {printf( "Operator: %s\n", yytext ); return EQ;}
"<"	    	 {printf( "Operator: %s\n", yytext ); return LT;}
"<="		 {printf( "Operator: %s\n", yytext ); return LTE;}
">"	    	 {printf( "Operator: %s\n", yytext ); return GT;}
">="		 {printf( "Operator: %s\n", yytext ); return GTE;}
"<>"		 {printf( "Operator: %s\n", yytext ); return NE;}
"and"		 {printf( "Operator: %s\n", yytext ); return AND;}
"or"		 {printf( "Operator: %s\n", yytext ); return OR;}
"not"		 {printf( "Operator: %s\n", yytext ); return NOT;}

{identifier}	{printf( "Identifier: %s\n", yytext); return IDENTIFIER;}
{constant}	    {printf( "Constant: %s\n", yytext ); return CONSTANT;}

[ \t]+ {}
[\n]+ {lines++;}
		 
[+-]?0[0-9]*                    {printf("Illegal integer at line\n"); return -1;}
[0-9]+[a-zA-Z_]+[a-zA-Z0-9_]*   {printf("Illegal identifier\n"); return -1;}
\'[a-zA-Z0-9]{2,}\'             {printf("Character of length >=2 at line\n"); return -1;}
.                               {printf("Lexical error\n"); return -1;}

%%